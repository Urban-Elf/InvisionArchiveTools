/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

javafx {
    version = "21" // Or any recent version you prefer (e.g. 20, 17)
    modules = [ 'javafx.swing', 'javafx.controls' ]
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava

    implementation 'com.formdev:flatlaf:3.6'
    implementation 'com.formdev:flatlaf-extras:3.6'
    implementation 'com.formdev:flatlaf-intellij-themes:3.6'
    implementation 'org.seleniumhq.selenium:selenium-java:4.6.0'
    implementation 'org.json:json:20210307'
    //implementation("org.graalvm.polyglot:polyglot:24.2.1")
    //implementation("org.graalvm.polyglot:python:24.2.1")
    //implementation 'com.github.Dansoftowner:jSystemThemeDetector:3.6'

    /*implementation "org.lwjgl:lwjgl:3.3.1"
    implementation "org.lwjgl:lwjgl-nfd:3.3.1"
    implementation "org.lwjgl:lwjgl-nfd:3.3.1:natives-windows"
    implementation "org.lwjgl:lwjgl-nfd:3.3.1:natives-linux"
    implementation "org.lwjgl:lwjgl-nfd:3.3.1:natives-macos"
    implementation "org.lwjgl:lwjgl-nfd:3.3.1:natives-macos-arm64"*/
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'com.urbanelf.iat.Core'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

def versionFile = file('../VERSION')
def generatedDir = "$buildDir/generated-src/version"

task generateVersion {
    doLast {
        if (!versionFile.exists()) {
            throw new GradleException("VERSION file not found!")
        }

        def version = versionFile.text.trim()
        def packageName = 'com.urbanelf.iat'
        def packageDir = packageName.replace('.', '/')
        def outputDir = file("$generatedDir/${packageDir}")
        outputDir.mkdirs()

        def versionJavaFile = new File(outputDir, 'Version.java')

        versionJavaFile.text = """
            // AUTO-GENERATED by Gradle; do not edit manually
            package ${packageName};

            public final class Version {
                public static final String VERSION = "${version}";
            }
        """.stripIndent().trim()
    }
}

// Tell Gradle to run this task before compiling Java
compileJava.dependsOn generateVersion

// Include generated sources in the compilation
sourceSets.main.java.srcDir generatedDir
