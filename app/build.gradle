/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

javafx {
    version = "21" // Or any recent version you prefer (e.g. 20, 17)
    modules = [ 'javafx.swing', 'javafx.controls' ]
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava

    implementation 'com.formdev:flatlaf:3.6'
    implementation 'com.formdev:flatlaf-extras:3.6'
    implementation 'com.formdev:flatlaf-intellij-themes:3.6'
    implementation 'org.seleniumhq.selenium:selenium-java:4.6.0'
    implementation 'org.json:json:20210307'
    implementation 'org.thymeleaf:thymeleaf:3.1.3.RELEASE'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'com.urbanelf.iat.Core'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

def versionFile = file('../VERSION')
def generatedDir = "$buildDir/generated-src/version"

task generateVersion {
    doLast {
        if (!versionFile.exists()) {
            throw new GradleException("VERSION file not found!")
        }

        def version = versionFile.text.trim()
        def packageName = 'com.urbanelf.iat'
        def packageDir = packageName.replace('.', '/')
        def outputDir = file("$generatedDir/${packageDir}")
        outputDir.mkdirs()

        def versionJavaFile = new File(outputDir, 'Version.java')

        versionJavaFile.text = """
            // AUTO-GENERATED by Gradle; do not edit manually
            package ${packageName};

            public final class Version {
                public static final String VERSION = "${version}";
            }
        """.stripIndent().trim()
    }
}

// Tell Gradle to run this task before compiling Java
compileJava.dependsOn generateVersion

// Include generated sources in the compilation
sourceSets.main.java.srcDir generatedDir

jar {
    manifest {
        attributes(
                'Main-Class': application.mainClass.get()
        )
    }
}

def resourceDirs = [
        "templates/html/messenger/res"
]

task generateResourceIndex {
    inputs.files resourceDirs.collect { file("src/main/resources/$it") }
    outputs.files resourceDirs.collect { file("src/main/resources/$it/index.txt") }

    doLast {
        resourceDirs.each { resDirPath ->
            def dir = file("src/main/resources/$resDirPath")
            if (!dir.exists()) {
                logger.warn("Resource directory does not exist: $dir")
                return
            }
            def outputFile = new File(dir, "index.txt")

            def indexLines = []
            dir.eachFileRecurse { file ->
                if (file.isFile() && file.name != "index.txt") { // skip the index file itself
                    def relativePath = dir.toPath().relativize(file.toPath()).toString()
                    indexLines << relativePath
                }
            }

            outputFile.text = indexLines.join('\n')
            println "Generated index file at: $outputFile"
        }
    }
}

// Make sure this runs before processResources so index is included in resources
processResources.dependsOn generateResourceIndex

// FAT JAR TASK
tasks.register('fatJar', Jar) {
    group = 'build'
    description = 'Assembles a fat JAR with dependencies'

    manifest {
        attributes 'Main-Class': application.mainClass.get()
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    with jar
    archiveBaseName.set('app') // Your output will be app.jar
    archiveClassifier.set('')
}
