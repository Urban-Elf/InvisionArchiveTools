name: Invision Archive Tools - Build & Package

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # Phase A - Build server
  build-server:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: server-linux
            archive_cmd: zip -r server.zip server
          - os: windows-latest
            artifact_name: server-windows
            archive_cmd: powershell Compress-Archive -Path server -DestinationPath server.zip
          - os: macos-latest
            artifact_name: server-macos
            archive_cmd: zip -r server.zip server

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Build Python server
      working-directory: server
      run: python dist-server.py

    - name: Archive server folder
      working-directory: server/dist
      run: ${{ matrix.archive_cmd }}

    - name: Upload server.zip
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: server/dist/server.zip

  # Phase B - Build app
  build:
    needs: build-server
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            server_artifact: server-linux
          - os: windows-latest
            server_artifact: server-windows
          - os: macos-latest
            server_artifact: server-macos

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download server artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.server_artifact }}
        path: server

    - name: Move and rename server archive
      run: |
        mkdir -p app/src/main/resources/server
        mv "server/server.zip" app/src/main/resources/server/server.zip
      shell: bash

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Cache Gradle
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: gradle-${{ runner.os }}-

    - name: Build fatJar
      working-directory: app
      run: ../gradlew fatJar

    - name: Upload JAR
      uses: actions/upload-artifact@v4
      with:
        name: iat-fatjar-${{ matrix.os }}
        path: app/build/libs/app.jar

  # Phase C - Linux DEB Installer
  linux-installer:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Download JBR
      run: |
        curl -L -o jre.tar.gz https://cache-redirector.jetbrains.com/intellij-jbr/jbr-17.0.12-linux-x64-b1000.54.tar.gz
        mkdir jre && tar -xf jre.tar.gz -C jre --strip-components=1

    - name: Download fatJar
      uses: actions/download-artifact@v4
      with:
        name: iat-fatjar
        path: app/build/libs

    - name: Read version
      id: version
      run: echo "version=$(cat ./VERSION)" >> $GITHUB_OUTPUT

    - name: Create DEB installer
      run: |
        mkdir -p ./jpackage/linux/res
        
        cat > ./jpackage/linux/res/control <<EOF
        Package: invision-archive-tools
        Version: ${{ steps.version.outputs.version }}
        Architecture: amd64
        Maintainer: Mark Fisher <iat.legacy037@aleeas.com>
        Depends:
        Description: Invision Archive Tools - A user-friendly tool that enables members of Invision-based communities to convert a variety of different types of content to offline copies.
        EOF
      
        jpackage \
          --type deb \
          --input app/build/libs \
          --main-jar app.jar \
          --main-class com.urbanelf.iat.Core \
          --runtime-image jre \
          --resource-dir jpackage/linux/res \
          --dest output \
          --name "Invision Archive Tools" \
          --icon jpackage/linux/icon.png \
          --app-version "${{ steps.version.outputs.version }}" \
          --linux-shortcut \
          --linux-menu-group "IAT;Invision;Archive;Tools" \
          --verbose

    - name: Debug output folder
      run: ls -l output

    - name: Upload DEB to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        files: output/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Phase C - Windows EXE Installer
  windows-installer:
    runs-on: windows-latest
    needs: build
    steps:
    - uses: actions/checkout@v4

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Download JRE
      run: |
        curl -L -o jre.zip https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.16%2B8/OpenJDK17U-jre_x64_windows_hotspot_17.0.16_8.zip
        mkdir jre
        7z x jre.zip -ojre

    - name: Download fatJar
      uses: actions/download-artifact@v4
      with:
        name: iat-fatjar
        path: app\build\libs
        
    - name: Read version
      id: version
      run: |
        echo "version=$(Get-Content -Raw -Path .\VERSION)" >> $env:GITHUB_OUTPUT

    - name: Create MSI installer
      run: |
        jpackage `
          --type msi `
          --input app\build\libs `
          --main-jar app.jar `
          --main-class com.urbanelf.iat.Core `
          --runtime-image jre `
          --dest output `
          --name "Invision Archive Tools" `
          --icon jpackage/windows/icon.ico `
          --app-version ${{ steps.version.outputs.version }} `
          --win-menu `
          --win-per-user-install `
          --win-shortcut `
          --verbose

    - name: Upload EXE to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        files: "output/*"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Phase C - macOS PKG Installer
  macos-installer:
    runs-on: macos-latest
    needs: build
    steps:
    - uses: actions/checkout@v4

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Download JRE
      run: |
        curl -L -o jre.tar.gz https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.16%2B8/OpenJDK17U-jre_x64_mac_hotspot_17.0.16_8.tar.gz
        mkdir jre && tar -xf jre.tar.gz -C jre --strip-components=1

    - name: Download fatJar
      uses: actions/download-artifact@v4
      with:
        name: iat-fatjar
        path: app/build/libs

    - name: Read version
      id: version
      run: echo "version=$(cat ./VERSION)" >> $GITHUB_OUTPUT

    - name: Create DMG installer
      run: |
        jpackage \
          --type dmg \
          --input app/build/libs \
          --main-jar app.jar \
          --main-class com.urbanelf.iat.Core \
          --runtime-image jre \
          --dest output \
          --name "Invision Archive Tools" \
          --icon jpackage/macos/icon.icns \
          --app-version "${{ steps.version.outputs.version }}" \
          --mac-package-name "Invision Archive Tools" \
          --mac-package-identifier com.urbanelf.iat \
          --mac-package-signing-prefix "com.urbanelf" \
          --verbose

    - name: Debug output folder
      run: ls -l output

    - name: Upload PKG to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        files: output/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

