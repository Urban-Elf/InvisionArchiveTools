name: Invision Archive Tools - Build & Package

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # Phase A - Build server (Linux, Windows)
  build-server:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: server-linux
            archive_cmd: zip -r server.zip server
          - os: windows-latest
            artifact_name: server-windows
            archive_cmd: 7z a -tzip server.zip server
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Build Python server
        working-directory: server
        run: |
          python -m venv server/.venv
          source server/.venv/bin/activate
          pip install --upgrade pip setuptools wheel
          pip install -r server/requirements.txt
          python dist-server.py

      - name: Archive server folder
        working-directory: server/dist
        run: ${{ matrix.archive_cmd }}

      - name: Upload server.zip
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: server/dist/server.zip

  # Phase A - Build server (macOS universal2)
  build-server-macos:
    strategy:
      matrix:
        arch: [x86_64, arm64]
        include:
          - arch: x86_64
            runner: macos-13
          - arch: arm64
            runner: macos-14
    runs-on: ${{ matrix.runner }}
    env:
      PATCH_PACKAGES: |
        Cython
        psutil
        websockets
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m venv server/.venv
          source server/.venv/bin/activate
          pip install --upgrade pip setuptools wheel
          pip install -r server/requirements.txt

      - name: Patch C-extensions for ${{ matrix.arch }}
        run: |
          source server/.venv/bin/activate
          for pkg in $PATCH_PACKAGES; do
            pip install --force-reinstall --no-cache-dir --only-binary=:all: $pkg
          done

      - name: Upload patched artifacts (x86_64 only)
        if: matrix.arch == 'x86_64'
        uses: actions/upload-artifact@v4
        with:
          name: patched-x86_64
          path: |
            server/.venv/lib/python3.12/site-packages/Cython
            server/.venv/lib/python3.12/site-packages/psutil
            server/.venv/lib/python3.12/site-packages/websockets

      - name: Download x86_64 artifacts (arm64 only)
        if: matrix.arch == 'arm64'
        uses: actions/download-artifact@v4
        with:
          name: patched-x86_64
          path: patched-x86_64

      - name: Merge x86_64 artifacts into arm64 (arm64 only)
        if: matrix.arch == 'arm64'
        run: |
          source server/.venv/bin/activate
          for pkg in $PATCH_PACKAGES; do
            pkg_dir="server/.venv/lib/python3.12/site-packages/$pkg"
            x86_dir="patched-x86_64/$pkg"
            if [ -d "$x86_dir" ]; then
              find "$pkg_dir" -name '*.so' -o -name '*.dylib' | while read f; do
                lipo -create "$f" "$x86_dir/$(basename $f)" -output "$f"
              done
            fi
          done

      - name: Build server (PyInstaller)
        working-directory: server
        run: python dist-server.py

      - name: Verify Universal2 Binary
        run: |
          echo "Checking server binary architecture..."
          file server/dist/server/server
          ARCHS=$(lipo -info server/dist/server/server | awk -F': ' '{print $NF}')
          echo "Detected architectures: $ARCHS"
          if [[ "$ARCHS" != *"x86_64"* ]] || [[ "$ARCHS" != *"arm64"* ]]; then
            echo "❌ ERROR: Universal2 binary missing x86_64 or arm64 slice!"
            exit 1
          fi
          echo "✅ Universal2 binary looks good."

      - name: Archive server folder
        working-directory: server/dist
        run: zip -r server.zip server

      - name: Upload server.zip
        uses: actions/upload-artifact@v4
        with:
          name: server-macos
          path: server/dist/server.zip

  # Phase B - Build app
  build-app:
    needs:
      - build-server
      - build-server-macos
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            server_artifact: server-linux
            artifact_suffix: linux
          - os: windows-latest
            server_artifact: server-windows
            artifact_suffix: windows
          - os: macos-latest
            server_artifact: server-macos
            artifact_suffix: macos
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Download server artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.server_artifact }}
          path: server

      - name: Move and rename server archive
        run: |
          rm -rf app/src/main/resources/server
          mkdir -p app/src/main/resources/server
          mv "server/server.zip" app/src/main/resources/server/server.zip
        shell: bash

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Build fatJar
        run: |
          ./gradlew fatJar
          mv app/build/libs/app.jar app/build/libs/iat-${{ matrix.artifact_suffix }}.jar

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: iat-${{ matrix.artifact_suffix }}
          path: app/build/libs/iat-${{ matrix.artifact_suffix }}.jar

      - name: Read version
        id: version
        run: echo "version=$(cat ./VERSION)" >> $GITHUB_OUTPUT

      - name: Upload JAR to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          files: app/build/libs/iat-${{ matrix.artifact_suffix }}.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Phase C - Linux DEB Installer
  linux-installer:
    needs: build-app
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Download JBR
        run: |
          curl -L -o jre.tar.gz https://cache-redirector.jetbrains.com/intellij-jbr/jbr-17.0.12-linux-x64-b1000.54.tar.gz
          mkdir jre && tar -xf jre.tar.gz -C jre --strip-components=1

      - name: Download fatJar
        uses: actions/download-artifact@v4
        with:
          name: iat-linux
          path: app/build/libs

      - name: Read version
        id: version
        run: echo "version=$(cat ./VERSION)" >> $GITHUB_OUTPUT

      - name: Create DEB installer
        run: |
          mkdir -p ./jpackage/linux/res
          cat > ./jpackage/linux/res/control <<EOF
          Package: invision-archive-tools
          Version: ${{ steps.version.outputs.version }}
          Architecture: amd64
          Maintainer: Mark Fisher <iat.legacy037@aleeas.com>
          Depends:
          Description: Invision Archive Tools - A user-friendly tool that enables members of Invision-based communities to convert a variety of different types of content to offline copies.
          EOF

          jpackage \
            --type deb \
            --input app/build/libs \
            --main-jar iat-linux.jar \
            --main-class com.urbanelf.iat.Core \
            --runtime-image jre \
            --resource-dir jpackage/linux/res \
            --dest output \
            --name "Invision Archive Tools" \
            --icon jpackage/linux/icon.png \
            --app-version "${{ steps.version.outputs.version }}" \
            --vendor "Urban-Elf" \
            --linux-shortcut \
            --linux-menu-group "IAT;Invision;Archive;Tools" \
            --verbose

      - name: Upload DEB to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          files: output/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Phase C - Windows EXE Installer
  windows-installer:
    needs: build-app
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Download JRE
        run: |
          curl -L -o jre.zip https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.16%2B8/OpenJDK17U-jre_x64_windows_hotspot_17.0.16_8.zip
          mkdir jre
          7z x jre.zip -ojre
          # Flatten directory structure
          Get-ChildItem -Directory jre | ForEach-Object {
            Move-Item -Path "$($_.FullName)\*" -Destination jre
            Remove-Item -Recurse -Force $_.FullName
          }
          Remove-Item jre.zip

      - name: Download fatJar
        uses: actions/download-artifact@v4
        with:
          name: iat-windows
          path: app/build/libs

      - name: Download Windows server.zip to resource directory
        uses: actions/download-artifact@v4
        with:
          name: server-windows
          path: app/src/main/resources/server

      - name: Unzip and move server
        run: |
          7z x app/src/main/resources/server/server.zip -oapp/build/libs
          del app\src\main\resources\server\server.zip

      - name: Read version
        id: version
        run: echo "version=$(Get-Content -Raw -Path .\VERSION)" >> $env:GITHUB_OUTPUT

      - name: Create MSI installer
        run: |
          jpackage `
            --type msi `
            --input app\build\libs `
            --main-jar iat-windows.jar `
            --main-class com.urbanelf.iat.Core `
            --runtime-image jre `
            --dest output `
            --name "Invision Archive Tools" `
            --icon jpackage/windows/icon.ico `
            --app-version ${{ steps.version.outputs.version }} `
            --vendor "Urban-Elf" `
            --win-menu `
            --win-menu-group "IAT" `
            --win-shortcut `
            --verbose

      - name: Upload EXE to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          files: "output/*"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Phase C - macOS PKG Installer
  macos-installer:
    needs: build-app
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Download JRE
        run: |
          curl -L -o jre.tar.gz https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.16%2B8/OpenJDK17U-jre_x64_mac_hotspot_17.0.16_8.tar.gz
          mkdir jre && tar -xf jre.tar.gz -C jre --strip-components=1

      - name: Download fatJar
        uses: actions/download-artifact@v4
        with:
          name: iat-macos
          path: app/build/libs

      - name: Read version
        id: version
        run: echo "version=$(cat ./VERSION)" >> $GITHUB_OUTPUT

      - name: Create DMG installer
        run: |
          jpackage \
            --type dmg \
            --input app/build/libs \
            --main-jar iat-macos.jar \
            --main-class com.urbanelf.iat.Core \
            --runtime-image jre \
            --dest output \
            --name "Invision Archive Tools" \
            --icon jpackage/macos/icon.icns \
            --app-version "${{ steps.version.outputs.version }}" \
            --vendor "Urban-Elf" \
            --mac-package-name "Invision Archive Tools" \
            --mac-package-identifier com.urbanelf.iat \
            --mac-package-signing-prefix "com.urbanelf" \
            --verbose

      - name: Upload DMG to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          files: output/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
