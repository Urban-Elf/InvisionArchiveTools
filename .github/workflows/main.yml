name: Invision Archive Tools - Build & Package

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # Phase A - Build
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Java 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'

    - name: Cache Gradle
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: gradle-${{ runner.os }}-

    - name: Build fatJar
      working-directory: app
      run: ../gradlew fatJar

    - name: Upload JAR
      uses: actions/upload-artifact@v4
      with:
        name: iat-fatjar
        path: app/build/libs/app.jar

  # Phase B - Export Additional Artifacts
  export:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download fatJar
      uses: actions/download-artifact@v4
      with:
        name: iat-fatjar
        path: app/build/libs

  # Phase C - Linux DEB Installer
  linux-installer:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4

    - name: Set up Java 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'

    - name: Download JBR
      run: |
        curl -L -o jbr.tar.gz https://cache-redirector.jetbrains.com/intellij-jbr/jbr_jcef-21.0.8-linux-x64-b1038.68.tar.gz
        mkdir jbr && tar -xf jbr.tar.gz -C jbr --strip-components=1

    - name: Download fatJar
      uses: actions/download-artifact@v4
      with:
        name: iat-fatjar
        path: app/build/libs

    - name: Read version
      id: version
      run: echo "version=$(cat ./VERSION)" >> $GITHUB_OUTPUT

    - name: Create DEB installer
      run: |
        mkdir -p ./jpackage/linux/res/DEBIAN
        
        cat > ./jpackage/linux/res/DEBIAN/control <<EOF
        Package: invision-archive-tools
        Version: ${{ steps.version.outputs.version }}
        Architecture: amd64
        Maintainer: Mark Fisher <iat.legacy037@aleeas.com>
        Depends:
        Description: A user-friendly tool that enables members of Invision-based communities to convert a variety of different types of content to offline copies.
      
        jpackage \
          --type deb \
          --input app/build/libs \
          --main-jar app.jar \
          --main-class com.urbanelf.iat.Core \
          --runtime-image jbr \
          --resource-dir jpackage/linux/res \
          --dest output \
          --name "Invision Archive Tools" \
          --icon jpackage/linux/icon.png \
          --app-version "${{ steps.version.outputs.version }}" \
          --linux-shortcut \
          --linux-menu-group "IAT;Invision;Archive;Tools" \
          --verbose

    - name: Debug output folder
      run: ls -l output

    - name: Upload DEB to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        files: output/*.deb
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Phase C - Windows EXE Installer
  windows-installer:
    runs-on: windows-latest
    needs: build
    steps:
    - uses: actions/checkout@v4

    - name: Set up Java 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'

    - name: Download JBR
      run: |
        curl -L -o jbr.zip https://cache-redirector.jetbrains.com/intellij-jbr/jbr_jcef-21.0.8-windows-x64-b1038.68.zip
        mkdir jbr && tar -xf jbr.zip -C jbr --strip-components=1

    - name: Download fatJar
      uses: actions/download-artifact@v4
      with:
        name: iat-fatjar
        path: app\build\libs
        
    - name: Read version
      id: version
      run: |
        echo "version=$(Get-Content -Raw -Path .\VERSION)" >> $env:GITHUB_OUTPUT

    - name: Create EXE installer
      run: |
        jpackage `
          --type exe `
          --input app\build\libs `
          --main-jar app.jar `
          --main-class com.urbanelf.iat.Core `
          --runtime-image jbr `
          --dest output `
          --name "Invision Archive Tools" `
          --icon jpackage/windows/icon.ico `
          --app-version ${{ steps.version.outputs.version }} `
          --win-menu `
          --win-per-user-install `
          --win-shortcut `
          --verbose

    - name: Upload EXE to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        files: "output/*.exe"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Phase C - macOS PKG Installer
  macos-installer:
    runs-on: macos-latest
    needs: build
    steps:
    - uses: actions/checkout@v4

    - name: Set up Java 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'

    - name: Download JBR
      run: |
        curl -L -o jbr.tar.gz https://cache-redirector.jetbrains.com/intellij-jbr/jbr_jcef-21.0.8-osx-x64-b1038.68.tar.gz
        mkdir jbr && tar -xf jbr.tar.gz -C jbr --strip-components=1

    - name: Download fatJar
      uses: actions/download-artifact@v4
      with:
        name: iat-fatjar
        path: app/build/libs

    - name: Read version
      id: version
      run: echo "version=$(cat ./VERSION)" >> $GITHUB_OUTPUT

    - name: Create PKG installer
      run: |
        jpackage \
          --type pkg \
          --input app/build/libs \
          --main-jar app.jar \
          --main-class com.urbanelf.iat.Core \
          --runtime-image jbr \
          --dest output \
          --name "Invision Archive Tools" \
          --icon jpackage/macos/icon.icns \
          --app-version "${{ steps.version.outputs.version }}" \
          --verbose

    - name: Debug output folder
      run: ls -l output

    - name: Upload PKG to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        files: output/*.pkg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

